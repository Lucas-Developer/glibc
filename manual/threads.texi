@node POSIX Threads
@c @node POSIX Threads, Lock elision, Cryptographic Functions, Top
@chapter POSIX Threads
@c %MENU% POSIX Threads
@cindex pthreads

This chapter describes the @glibcadj{} POSIX Thread implementation.

@menu
* Thread-specific Data::          Support for creating and
				  managing thread-specific data
* Initialize and destroy a mutex:: Initialize and destroy a mutex.
@end menu

@node Thread-specific Data
@section Thread-specific Data

The @glibcadj{} implements functions to allow users to create and manage
data specific to a thread.  Such data may be destroyed at thread exit,
if a destructor is provided.  The following functions are defined:

@table @code

@item int pthread_key_create (pthread_key_t *@var{key}, void (*@var{destructor})(void*))
Create a thread-specific data key for the calling thread, referenced by
@var{key}.

Objects declared with the C++11 @code{thread_local} keyword are destroyed
before thread-specific data, so they should not be used in thread-specific
data destructors or even as members of the thread-specific data, since the
latter is passed as an argument to the destructor function.

@item int pthread_key_delete (pthread_key_t @var{key})
Destroy the thread-specific data @var{key} in the calling thread.  The
destructor for the thread-specific data is not called during destruction, nor
is it called during thread exit.

@item void *pthread_getspecific (pthread_key_t @var{key})
Return the thread-specific data associated with @var{key} in the calling
thread.

@item int pthread_setspecific (pthread_key_t @var{key}, const void *@var{value})
Associate the thread-specific @var{value} with @var{key} in the calling thread.

@end table

@node Initialize and destroy a mutex
@section Initialize and destroy a mutex

As a extension to the standard POSIX mutex type initializers @glibcadj{} allows
to set generic flags in the initializer using PTHREAD_MUTEX_INIT_NP, ored with the
mutex type.  There is no error checking for illegal combinations, which may result
in undefined behavior.

@smallexample
pthread_mutex_t mutex = PTHREAD_MUTEX_INIT_NP(...);
@end smallexample
